<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="&lt;div align=&quot;center&quot;&gt;&#10;  &lt;img src=&quot;frontend/src/assets/images/nibaron_icon.png&quot; alt=&quot;Nibaron Logo&quot; width=&quot;120&quot; height=&quot;120&quot; /&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;# Nibaron — ClimateAI for Farmers&#10;&#10;&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;*Predict. Prevent. Protect.*&#10;&#10;&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;![Version](https://img.shields.io/badge/version-1.0.0-blue.svg)&#10;![Laravel](https://img.shields.io/badge/Laravel-12.x-red.svg)&#10;![React](https://img.shields.io/badge/React-18.x-blue.svg)&#10;![License](https://img.shields.io/badge/license-MIT-green.svg)&#10;&#10;&lt;/div&gt;&#10;&#10;##  Platform Showcase&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;[![Nibaron Platform Demo](https://img.youtube.com/vi/YOUR_VIDEO_ID/maxresdefault.jpg)](https://www.youtube.com/watch?v=YOUR_VIDEO_ID)&#10;&#10;*Watch our platform in action - See how Nibaron empowers farmers with AI-driven climate insights*&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;** [Watch Full Demo](https://www.youtube.com/watch?v=YOUR_VIDEO_ID) •  [Mobile App Demo](https://www.youtube.com/watch?v=YOUR_MOBILE_VIDEO_ID) •  [Web Platform Tour](https://www.youtube.com/watch?v=YOUR_WEB_VIDEO_ID)**&#10;&#10;&lt;/div&gt;&#10;&#10;---&#10;&#10;##  Overview&#10;&#10;Nibaron is an innovative ClimateAI platform designed specifically for farmers in Bangladesh and globally. Unlike traditional weather forecasting tools, Nibaron provides crop-specific, actionable recommendations that help farmers make informed decisions about irrigation, fertilization, and crop protection.&#10;&#10;### The Problem&#10;Farmers face severe yield losses from:&#10;- Heatwaves and extreme weather events&#10;- Unpredictable rainfall patterns&#10;- Flooding and waterlogging&#10;- Air pollution affecting crop health&#10;&#10;Current weather forecasts don't translate into actionable, crop-specific advice, leaving farmers to make critical decisions based on guesswork.&#10;&#10;### Our Solution&#10;Nibaron is an all-in-one ClimateAI platform that:&#10;- **Links climate hazards** (heatwave, heavy rain, flood, pollution) to crop growth stages &amp; physiology&#10;- **Generates actionable recommendations** (irrigation amounts, fertilizer timing, protective measures)&#10;- **Provides Bangla voice alerts** for accessibility&#10;- **Integrates marketplace features** for supply chain optimization&#10;&#10;## ️ Project Architecture&#10;&#10;This repository contains the **Nibaron Bazaar** web application - the marketplace platform for buyers, sellers, and agribusinesses. The ecosystem consists of two main components:&#10;&#10;1. **Nibaron Mobile App** (Flutter) - For farmers and producers&#10;2. **Nibaron Bazaar Website** (React + Laravel) - For buyers and businesses *(This Repository)*&#10;&#10;### Tech Stack&#10;&#10;#### Frontend&#10;- **Framework:** React 18.x with Vite&#10;- **Styling:** Tailwind CSS&#10;- **UI Components:** Radix UI&#10;- **State Management:** TanStack Query (React Query)&#10;- **HTTP Client:** Axios&#10;- **Animation:** Lottie React Player, React Spring&#10;- **Form Handling:** React Hook Form with Zod validation&#10;&#10;#### Backend&#10;- **Framework:** Laravel 12.x&#10;- **Database:** SQLite (development), MySQL/PostgreSQL (production)&#10;- **Authentication:** Laravel Sanctum&#10;- **API:** RESTful API&#10;- **Queue System:** Laravel Queue&#10;- **Mail System:** Laravel Mail&#10;- **Testing:** PHPUnit&#10;&#10;##  Project Structure&#10;&#10;```&#10;Nibaron-Website/&#10;├── README.md&#10;├── backend/                 # Laravel API Backend&#10;│   ├── app/&#10;│   │   ├── Console/        # Artisan commands&#10;│   │   ├── Events/         # Event classes&#10;│   │   ├── Http/&#10;│   │   │   ├── Controllers/    # API controllers&#10;│   │   │   ├── Middleware/     # Custom middleware&#10;│   │   │   └── Resources/      # API resources&#10;│   │   ├── Jobs/           # Queue jobs&#10;│   │   ├── Listeners/      # Event listeners&#10;│   │   ├── Mail/           # Mailable classes&#10;│   │   ├── Models/         # Eloquent models&#10;│   │   ├── Providers/      # Service providers&#10;│   │   ├── Repositories/   # Repository pattern&#10;│   │   └── Services/       # Business logic services&#10;│   ├── config/             # Configuration files&#10;│   ├── database/&#10;│   │   ├── factories/      # Model factories&#10;│   │   ├── migrations/     # Database migrations&#10;│   │   └── seeders/        # Database seeders&#10;│   ├── public/             # Public assets&#10;│   ├── resources/          # Views and assets&#10;│   ├── routes/             # Route definitions&#10;│   ├── storage/            # File storage&#10;│   └── tests/              # Test suites&#10;└── frontend/               # React Frontend&#10;    ├── src/&#10;    │   ├── components/     # Reusable UI components&#10;    │   ├── config/         # Configuration files&#10;    │   ├── context/        # React contexts&#10;    │   ├── hooks/          # Custom React hooks&#10;    │   ├── layouts/        # Layout components&#10;    │   ├── pages/          # Page components&#10;    │   ├── routes/         # Route definitions&#10;    │   ├── services/       # API services&#10;    │   ├── styles/         # Global styles&#10;    │   └── utils/          # Utility functions&#10;    ├── public/             # Static assets&#10;    └── tests/              # Frontend tests&#10;```&#10;&#10;##  Quick Start&#10;&#10;### Prerequisites&#10;- **Node.js** &gt;= 18.x&#10;- **PHP** &gt;= 8.2&#10;- **Composer** &gt;= 2.x&#10;- **npm** or **yarn**&#10;- **SQLite** (for development)&#10;&#10;### Installation&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/your-org/nibaron-website.git&#10;   cd nibaron-website&#10;   ```&#10;&#10;2. **Backend Setup (Laravel)**&#10;   ```bash&#10;   cd backend&#10;   &#10;   # Install PHP dependencies&#10;   composer install&#10;   &#10;   # Copy environment file&#10;   copy .env.example .env&#10;   &#10;   # Generate application key&#10;   php artisan key:generate&#10;   &#10;   # Create database&#10;   php artisan migrate --seed&#10;   &#10;   # Start Laravel development server&#10;   php artisan serve&#10;   ```&#10;&#10;3. **Frontend Setup (React)**&#10;   ```bash&#10;   cd frontend&#10;   &#10;   # Install Node.js dependencies&#10;   npm install&#10;   &#10;   # Start development server&#10;   npm run dev&#10;   ```&#10;&#10;4. **Access the application**&#10;   - Frontend: http://localhost:5173&#10;   - Backend API: http://localhost:8000&#10;   - API Documentation: http://localhost:8000/api/documentation&#10;&#10;##  Features Overview&#10;&#10;### Nibaron Bazaar (This Website)&#10;&#10;#### For Buyers &amp; Businesses&#10;1. **Authentication &amp; Roles**&#10;   - Multi-role system (buyers, wholesalers, retailers, exporters)&#10;   - Secure OTP-based authentication&#10;&#10;2. **Dashboard**&#10;   - Crop predictions from farmer app data&#10;   - Active marketplace listings overview&#10;   - Pre-orders and contracts management&#10;   - Community requests summary&#10;&#10;3. **Marketplace**&#10;   - Browse current crop listings&#10;   - Advanced filtering (crop type, price, region, grade)&#10;   - Real-time stock availability&#10;   - Verified farmer/producer profiles&#10;&#10;4. **Pre-Orders System**&#10;   - Future harvest predictions based on AI&#10;   - Early booking for supply chain security&#10;   - Quality predictions with confidence scores&#10;   - Seasonal planning tools&#10;&#10;5. **Community &amp; Discussion**&#10;   - B2B networking platform&#10;   - Crop requirement posting&#10;   - Direct farmer-buyer communication&#10;   - Verified business interactions&#10;&#10;6. **Order Management**&#10;   - Complete order lifecycle tracking&#10;   - Multiple payment options (Cash, Mobile Banking, Bank Transfer)&#10;   - Delivery coordination&#10;   - Invoice generation&#10;&#10;### Integration with Nibaron Mobile App&#10;&#10;#### Data Flow&#10;- **Farmer App → Website:** Crop information, quality predictions, availability&#10;- **Website → Farmer App:** Order notifications, buyer requests&#10;- **Shared Backend:** Synchronized data across platforms&#10;&#10;#### Real-time Synchronization&#10;- Farmer listings instantly appear in marketplace&#10;- Order notifications sent to farmer mobile app&#10;- Community posts accessible from both platforms&#10;&#10;## ️ Development Guide&#10;&#10;### Environment Setup&#10;&#10;#### Backend (.env configuration)&#10;```env&#10;APP_NAME=&quot;Nibaron Bazaar&quot;&#10;APP_ENV=local&#10;APP_KEY=base64:your-key-here&#10;APP_DEBUG=true&#10;APP_URL=http://localhost:8000&#10;&#10;DB_CONNECTION=sqlite&#10;DB_DATABASE=database/database.sqlite&#10;&#10;MAIL_MAILER=smtp&#10;MAIL_HOST=mailhog&#10;MAIL_PORT=1025&#10;&#10;QUEUE_CONNECTION=sync&#10;```&#10;&#10;#### Frontend (environment variables)&#10;```env&#10;VITE_API_BASE_URL=http://localhost:8000/api&#10;VITE_APP_NAME=&quot;Nibaron Bazaar&quot;&#10;```&#10;&#10;### Available Scripts&#10;&#10;#### Backend&#10;```bash&#10;# Development server&#10;php artisan serve&#10;&#10;# Run migrations&#10;php artisan migrate&#10;&#10;# Seed database&#10;php artisan db:seed&#10;&#10;# Clear cache&#10;php artisan cache:clear&#10;&#10;# Run tests&#10;php artisan test&#10;&#10;# Generate API documentation&#10;php artisan l5-swagger:generate&#10;```&#10;&#10;#### Frontend&#10;```bash&#10;# Development server&#10;npm run dev&#10;&#10;# Build for production&#10;npm run build&#10;&#10;# Run linting&#10;npm run lint&#10;&#10;# Run tests&#10;npm test&#10;&#10;# Preview production build&#10;npm run preview&#10;```&#10;&#10;### API Endpoints&#10;&#10;#### Authentication&#10;- `POST /api/auth/register` - User registration&#10;- `POST /api/auth/login` - User login&#10;- `POST /api/auth/logout` - User logout&#10;- `POST /api/auth/refresh` - Refresh token&#10;&#10;#### Marketplace&#10;- `GET /api/products` - List products&#10;- `GET /api/products/{id}` - Product details&#10;- `POST /api/products` - Create product listing&#10;- `PUT /api/products/{id}` - Update product&#10;&#10;#### Orders&#10;- `POST /api/orders` - Create order&#10;- `GET /api/orders` - List user orders&#10;- `GET /api/orders/{id}` - Order details&#10;- `PUT /api/orders/{id}/status` - Update order status&#10;&#10;#### Predictions&#10;- `GET /api/predictions/crops` - Crop quality predictions&#10;- `GET /api/predictions/harvest` - Harvest time predictions&#10;&#10;##  Testing&#10;&#10;### Backend Testing&#10;```bash&#10;# Run all tests&#10;php artisan test&#10;&#10;# Run specific test suite&#10;php artisan test --testsuite=Feature&#10;&#10;# Run with coverage&#10;php artisan test --coverage&#10;```&#10;&#10;### Frontend Testing&#10;```bash&#10;# Run tests&#10;npm test&#10;&#10;# Run tests in watch mode&#10;npm run test:watch&#10;&#10;# Run with coverage&#10;npm test -- --coverage&#10;```&#10;&#10;##  Deployment&#10;&#10;### Production Environment&#10;&#10;#### Backend Deployment&#10;1. **Server Requirements**&#10;   - PHP 8.2+&#10;   - Composer&#10;   - MySQL/PostgreSQL&#10;   - Redis (optional, for caching)&#10;&#10;2. **Deployment Steps**&#10;   ```bash&#10;   # Install dependencies&#10;   composer install --optimize-autoloader --no-dev&#10;   &#10;   # Set up environment&#10;   cp .env.example .env&#10;   php artisan key:generate&#10;   &#10;   # Run migrations&#10;   php artisan migrate --force&#10;   &#10;   # Optimize for production&#10;   php artisan config:cache&#10;   php artisan route:cache&#10;   php artisan view:cache&#10;   ```&#10;&#10;#### Frontend Deployment&#10;1. **Build for production**&#10;   ```bash&#10;   npm run build&#10;   ```&#10;&#10;2. **Deploy to static hosting** (Netlify, Vercel, etc.)&#10;   - Upload `dist/` folder contents&#10;   - Configure redirects for SPA routing&#10;&#10;### Docker Deployment (Optional)&#10;```bash&#10;# Build and run with Docker Compose&#10;docker-compose up -d&#10;&#10;# Scale services&#10;docker-compose up -d --scale web=3&#10;```&#10;&#10;##  Contributing&#10;&#10;### Development Workflow&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Make your changes&#10;4. Write/update tests&#10;5. Commit your changes (`git commit -m 'Add amazing feature'`)&#10;6. Push to the branch (`git push origin feature/amazing-feature`)&#10;7. Open a Pull Request&#10;&#10;### Code Standards&#10;- **PHP:** Follow PSR-12 coding standards&#10;- **JavaScript:** Use ESLint configuration provided&#10;- **Commit Messages:** Follow conventional commits format&#10;&#10;### Testing Requirements&#10;- All new features must include tests&#10;- Maintain minimum 80% code coverage&#10;- All tests must pass before PR approval&#10;&#10;##  Documentation&#10;&#10;### API Documentation&#10;- **Development:** http://localhost:8000/api/documentation&#10;- **Production:** https://api.nibaron.com/documentation&#10;&#10;### Additional Resources&#10;- [Laravel Documentation](https://laravel.com/docs)&#10;- [React Documentation](https://react.dev)&#10;- [Tailwind CSS Documentation](https://tailwindcss.com/docs)&#10;&#10;##  Troubleshooting&#10;&#10;### Common Issues&#10;&#10;#### Backend Issues&#10;```bash&#10;# Clear all caches&#10;php artisan cache:clear&#10;php artisan config:clear&#10;php artisan route:clear&#10;php artisan view:clear&#10;&#10;# Regenerate autoload files&#10;composer dump-autoload&#10;&#10;# Fix file permissions (Linux/Mac)&#10;chmod -R 775 storage bootstrap/cache&#10;```&#10;&#10;#### Frontend Issues&#10;```bash&#10;# Clear node modules and reinstall&#10;rm -rf node_modules package-lock.json&#10;npm install&#10;&#10;# Clear Vite cache&#10;rm -rf node_modules/.vite&#10;```&#10;&#10;### Performance Optimization&#10;- Enable Redis for caching&#10;- Use queue workers for background jobs&#10;- Implement database indexing&#10;- Enable gzip compression&#10;- Use CDN for static assets&#10;&#10;##  Analytics &amp; Monitoring&#10;&#10;### Key Metrics&#10;- User registration and engagement&#10;- Marketplace transaction volume&#10;- Prediction accuracy rates&#10;- API response times&#10;- Error rates and system health&#10;&#10;### Monitoring Tools&#10;- Laravel Telescope (development)&#10;- Application Performance Monitoring (APM)&#10;- Database query optimization&#10;- Error tracking and logging&#10;&#10;##  Internationalization&#10;&#10;### Supported Languages&#10;- **Bengali (বাংলা)** - Primary language&#10;- **English** - Secondary language&#10;&#10;### Adding New Languages&#10;1. Create language files in `resources/lang/{locale}/`&#10;2. Update frontend translation files&#10;3. Configure language switching in UI&#10;&#10;##  Security&#10;&#10;### Security Features&#10;- CSRF protection&#10;- SQL injection prevention&#10;- XSS protection&#10;- Rate limiting&#10;- Input validation and sanitization&#10;- Secure authentication with Sanctum&#10;&#10;### Security Best Practices&#10;- Regular security updates&#10;- Environment variable protection&#10;- HTTPS enforcement in production&#10;- Regular security audits&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;##  Team &amp; Support&#10;&#10;### Development Team&#10;- **Project Lead:** [Your Name]&#10;- **Backend Developer:** [Backend Dev Name]&#10;- **Frontend Developer:** [Frontend Dev Name]&#10;- **DevOps Engineer:** [DevOps Name]&#10;&#10;### Support &amp; Contact&#10;- **Email:** support@nibaron.com&#10;- **Documentation:** https://docs.nibaron.com&#10;- **Issue Tracker:** [GitHub Issues](https://github.com/your-org/nibaron-website/issues)&#10;&#10;---&#10;&#10;**Made with ❤️ for farmers worldwide**&#10;&#10;*Nibaron — Empowering farmers with climate intelligence to build a more resilient agricultural future.*&#10;" />
              <option name="updatedContent" value="&lt;div align=&quot;center&quot;&gt;&#10;  &lt;img src=&quot;frontend/src/assets/images/nibaron_icon.png&quot; alt=&quot;Nibaron Logo&quot; width=&quot;120&quot; height=&quot;120&quot; /&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;# Nibaron — ClimateAI for Farmers&#10;&#10;&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;*Predict. Prevent. Protect.*&#10;&#10;&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;![Version](https://img.shields.io/badge/version-1.0.0-blue.svg)&#10;![Laravel](https://img.shields.io/badge/Laravel-12.x-red.svg)&#10;![React](https://img.shields.io/badge/React-18.x-blue.svg)&#10;![License](https://img.shields.io/badge/license-MIT-green.svg)&#10;&#10;&lt;/div&gt;&#10;&#10;##  Platform Showcase&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;[![Nibaron Platform Demo](https://img.youtube.com/vi/YOUR_VIDEO_ID/maxresdefault.jpg)](https://www.youtube.com/watch?v=YOUR_VIDEO_ID)&#10;&#10;*Watch our platform in action - See how Nibaron empowers farmers with AI-driven climate insights*&#10;&#10;&lt;/div&gt;&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;** [Watch Full Demo](https://www.youtube.com/watch?v=YOUR_VIDEO_ID) •  [Mobile App Demo](https://www.youtube.com/watch?v=YOUR_MOBILE_VIDEO_ID) •  [Web Platform Tour](https://www.youtube.com/watch?v=YOUR_WEB_VIDEO_ID)**&#10;&#10;&lt;/div&gt;&#10;&#10;---&#10;&#10;##  Overview&#10;&#10;Nibaron is an innovative ClimateAI platform designed specifically for farmers in Bangladesh and globally. Unlike traditional weather forecasting tools, Nibaron provides crop-specific, actionable recommendations that help farmers make informed decisions about irrigation, fertilization, and crop protection.&#10;&#10;### The Problem&#10;Farmers face severe yield losses from:&#10;- Heatwaves and extreme weather events&#10;- Unpredictable rainfall patterns&#10;- Flooding and waterlogging&#10;- Air pollution affecting crop health&#10;&#10;Current weather forecasts don't translate into actionable, crop-specific advice, leaving farmers to make critical decisions based on guesswork.&#10;&#10;### Our Solution&#10;Nibaron is an all-in-one ClimateAI platform that:&#10;- **Links climate hazards** (heatwave, heavy rain, flood, pollution) to crop growth stages &amp; physiology&#10;- **Generates actionable recommendations** (irrigation amounts, fertilizer timing, protective measures)&#10;- **Provides Bangla voice alerts** for accessibility&#10;- **Integrates marketplace features** for supply chain optimization&#10;&#10;## ️ Project Architecture&#10;&#10;This repository contains the **Nibaron Bazaar** web application - the marketplace platform for buyers, sellers, and agribusinesses. The ecosystem consists of two main components:&#10;&#10;1. **Nibaron Mobile App** (Flutter) - For farmers and producers&#10;2. **Nibaron Bazaar Website** (React + Laravel) - For buyers and businesses *(This Repository)*&#10;&#10;### Tech Stack&#10;&#10;#### Frontend&#10;- **Framework:** React 18.x with Vite&#10;- **Styling:** Tailwind CSS&#10;- **UI Components:** Radix UI&#10;- **State Management:** TanStack Query (React Query)&#10;- **HTTP Client:** Axios&#10;- **Animation:** Lottie React Player, React Spring&#10;- **Form Handling:** React Hook Form with Zod validation&#10;&#10;#### Backend&#10;- **Framework:** Laravel 12.x&#10;- **Database:** SQLite (development), MySQL/PostgreSQL (production)&#10;- **Authentication:** Laravel Sanctum&#10;- **API:** RESTful API&#10;- **Queue System:** Laravel Queue&#10;- **Mail System:** Laravel Mail&#10;- **Testing:** PHPUnit&#10;&#10;##  Project Structure&#10;&#10;```&#10;Nibaron-Website/&#10;├── README.md&#10;├── backend/                 # Laravel API Backend&#10;│   ├── app/&#10;│   │   ├── Console/        # Artisan commands&#10;│   │   ├── Events/         # Event classes&#10;│   │   ├── Http/&#10;│   │   │   ├── Controllers/    # API controllers&#10;│   │   │   ├── Middleware/     # Custom middleware&#10;│   │   │   └── Resources/      # API resources&#10;│   │   ├── Jobs/           # Queue jobs&#10;│   │   ├── Listeners/      # Event listeners&#10;│   │   ├── Mail/           # Mailable classes&#10;│   │   ├── Models/         # Eloquent models&#10;│   │   ├── Providers/      # Service providers&#10;│   │   ├── Repositories/   # Repository pattern&#10;│   │   └── Services/       # Business logic services&#10;│   ├── config/             # Configuration files&#10;│   ├── database/&#10;│   │   ├── factories/      # Model factories&#10;│   │   ├── migrations/     # Database migrations&#10;│   │   └── seeders/        # Database seeders&#10;│   ├── public/             # Public assets&#10;│   ├── resources/          # Views and assets&#10;│   ├── routes/             # Route definitions&#10;│   ├── storage/            # File storage&#10;│   └── tests/              # Test suites&#10;└── frontend/               # React Frontend&#10;    ├── src/&#10;    │   ├── components/     # Reusable UI components&#10;    │   ├── config/         # Configuration files&#10;    │   ├── context/        # React contexts&#10;    │   ├── hooks/          # Custom React hooks&#10;    │   ├── layouts/        # Layout components&#10;    │   ├── pages/          # Page components&#10;    │   ├── routes/         # Route definitions&#10;    │   ├── services/       # API services&#10;    │   ├── styles/         # Global styles&#10;    │   └── utils/          # Utility functions&#10;    ├── public/             # Static assets&#10;    └── tests/              # Frontend tests&#10;```&#10;&#10;##  Quick Start&#10;&#10;### Prerequisites&#10;- **Node.js** &gt;= 18.x&#10;- **PHP** &gt;= 8.2&#10;- **Composer** &gt;= 2.x&#10;- **npm** or **yarn**&#10;- **SQLite** (for development)&#10;&#10;### Installation&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/your-org/nibaron-website.git&#10;   cd nibaron-website&#10;   ```&#10;&#10;2. **Backend Setup (Laravel)**&#10;   ```bash&#10;   cd backend&#10;   &#10;   # Install PHP dependencies&#10;   composer install&#10;   &#10;   # Copy environment file&#10;   copy .env.example .env&#10;   &#10;   # Generate application key&#10;   php artisan key:generate&#10;   &#10;   # Create database&#10;   php artisan migrate --seed&#10;   &#10;   # Start Laravel development server&#10;   php artisan serve&#10;   ```&#10;&#10;3. **Frontend Setup (React)**&#10;   ```bash&#10;   cd frontend&#10;   &#10;   # Install Node.js dependencies&#10;   npm install&#10;   &#10;   # Start development server&#10;   npm run dev&#10;   ```&#10;&#10;4. **Access the application**&#10;   - Frontend: http://localhost:5173&#10;   - Backend API: http://localhost:8000&#10;   - API Documentation: http://localhost:8000/api/documentation&#10;&#10;##  Features Overview&#10;&#10;### Nibaron Bazaar (This Website)&#10;&#10;#### For Buyers &amp; Businesses&#10;1. **Authentication &amp; Roles**&#10;   - Multi-role system (buyers, wholesalers, retailers, exporters)&#10;   - Secure OTP-based authentication&#10;&#10;2. **Dashboard**&#10;   - Crop predictions from farmer app data&#10;   - Active marketplace listings overview&#10;   - Pre-orders and contracts management&#10;   - Community requests summary&#10;&#10;3. **Marketplace**&#10;   - Browse current crop listings&#10;   - Advanced filtering (crop type, price, region, grade)&#10;   - Real-time stock availability&#10;   - Verified farmer/producer profiles&#10;&#10;4. **Pre-Orders System**&#10;   - Future harvest predictions based on AI&#10;   - Early booking for supply chain security&#10;   - Quality predictions with confidence scores&#10;   - Seasonal planning tools&#10;&#10;5. **Community &amp; Discussion**&#10;   - B2B networking platform&#10;   - Crop requirement posting&#10;   - Direct farmer-buyer communication&#10;   - Verified business interactions&#10;&#10;6. **Order Management**&#10;   - Complete order lifecycle tracking&#10;   - Multiple payment options (Cash, Mobile Banking, Bank Transfer)&#10;   - Delivery coordination&#10;   - Invoice generation&#10;&#10;### Integration with Nibaron Mobile App&#10;&#10;#### Data Flow&#10;- **Farmer App → Website:** Crop information, quality predictions, availability&#10;- **Website → Farmer App:** Order notifications, buyer requests&#10;- **Shared Backend:** Synchronized data across platforms&#10;&#10;#### Real-time Synchronization&#10;- Farmer listings instantly appear in marketplace&#10;- Order notifications sent to farmer mobile app&#10;- Community posts accessible from both platforms&#10;&#10;## ️ Development Guide&#10;&#10;### Environment Setup&#10;&#10;#### Backend (.env configuration)&#10;```env&#10;APP_NAME=&quot;Nibaron Bazaar&quot;&#10;APP_ENV=local&#10;APP_KEY=base64:your-key-here&#10;APP_DEBUG=true&#10;APP_URL=http://localhost:8000&#10;&#10;DB_CONNECTION=sqlite&#10;DB_DATABASE=database/database.sqlite&#10;&#10;MAIL_MAILER=smtp&#10;MAIL_HOST=mailhog&#10;MAIL_PORT=1025&#10;&#10;QUEUE_CONNECTION=sync&#10;```&#10;&#10;#### Frontend (environment variables)&#10;```env&#10;VITE_API_BASE_URL=http://localhost:8000/api&#10;VITE_APP_NAME=&quot;Nibaron Bazaar&quot;&#10;```&#10;&#10;### Available Scripts&#10;&#10;#### Backend&#10;```bash&#10;# Development server&#10;php artisan serve&#10;&#10;# Run migrations&#10;php artisan migrate&#10;&#10;# Seed database&#10;php artisan db:seed&#10;&#10;# Clear cache&#10;php artisan cache:clear&#10;&#10;# Run tests&#10;php artisan test&#10;&#10;# Generate API documentation&#10;php artisan l5-swagger:generate&#10;```&#10;&#10;#### Frontend&#10;```bash&#10;# Development server&#10;npm run dev&#10;&#10;# Build for production&#10;npm run build&#10;&#10;# Run linting&#10;npm run lint&#10;&#10;# Run tests&#10;npm test&#10;&#10;# Preview production build&#10;npm run preview&#10;```&#10;&#10;### API Endpoints&#10;&#10;#### Authentication&#10;- `POST /api/auth/register` - User registration&#10;- `POST /api/auth/login` - User login&#10;- `POST /api/auth/logout` - User logout&#10;- `POST /api/auth/refresh` - Refresh token&#10;&#10;#### Marketplace&#10;- `GET /api/products` - List products&#10;- `GET /api/products/{id}` - Product details&#10;- `POST /api/products` - Create product listing&#10;- `PUT /api/products/{id}` - Update product&#10;&#10;#### Orders&#10;- `POST /api/orders` - Create order&#10;- `GET /api/orders` - List user orders&#10;- `GET /api/orders/{id}` - Order details&#10;- `PUT /api/orders/{id}/status` - Update order status&#10;&#10;#### Predictions&#10;- `GET /api/predictions/crops` - Crop quality predictions&#10;- `GET /api/predictions/harvest` - Harvest time predictions&#10;&#10;##  Testing&#10;&#10;### Backend Testing&#10;```bash&#10;# Run all tests&#10;php artisan test&#10;&#10;# Run specific test suite&#10;php artisan test --testsuite=Feature&#10;&#10;# Run with coverage&#10;php artisan test --coverage&#10;```&#10;&#10;### Frontend Testing&#10;```bash&#10;# Run tests&#10;npm test&#10;&#10;# Run tests in watch mode&#10;npm run test:watch&#10;&#10;# Run with coverage&#10;npm test -- --coverage&#10;```&#10;&#10;##  Deployment&#10;&#10;### Production Environment&#10;&#10;#### Backend Deployment&#10;1. **Server Requirements**&#10;   - PHP 8.2+&#10;   - Composer&#10;   - MySQL/PostgreSQL&#10;   - Redis (optional, for caching)&#10;&#10;2. **Deployment Steps**&#10;   ```bash&#10;   # Install dependencies&#10;   composer install --optimize-autoloader --no-dev&#10;   &#10;   # Set up environment&#10;   cp .env.example .env&#10;   php artisan key:generate&#10;   &#10;   # Run migrations&#10;   php artisan migrate --force&#10;   &#10;   # Optimize for production&#10;   php artisan config:cache&#10;   php artisan route:cache&#10;   php artisan view:cache&#10;   ```&#10;&#10;#### Frontend Deployment&#10;1. **Build for production**&#10;   ```bash&#10;   npm run build&#10;   ```&#10;&#10;2. **Deploy to static hosting** (Netlify, Vercel, etc.)&#10;   - Upload `dist/` folder contents&#10;   - Configure redirects for SPA routing&#10;&#10;### Docker Deployment (Optional)&#10;```bash&#10;# Build and run with Docker Compose&#10;docker-compose up -d&#10;&#10;# Scale services&#10;docker-compose up -d --scale web=3&#10;```&#10;&#10;##  Contributing&#10;&#10;### Development Workflow&#10;1. Fork the repository&#10;2. Create a feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Make your changes&#10;4. Write/update tests&#10;5. Commit your changes (`git commit -m 'Add amazing feature'`)&#10;6. Push to the branch (`git push origin feature/amazing-feature`)&#10;7. Open a Pull Request&#10;&#10;### Code Standards&#10;- **PHP:** Follow PSR-12 coding standards&#10;- **JavaScript:** Use ESLint configuration provided&#10;- **Commit Messages:** Follow conventional commits format&#10;&#10;### Testing Requirements&#10;- All new features must include tests&#10;- Maintain minimum 80% code coverage&#10;- All tests must pass before PR approval&#10;&#10;##  Documentation&#10;&#10;### API Documentation&#10;- **Development:** http://localhost:8000/api/documentation&#10;- **Production:** https://api.nibaron.com/documentation&#10;&#10;### Additional Resources&#10;- [Laravel Documentation](https://laravel.com/docs)&#10;- [React Documentation](https://react.dev)&#10;- [Tailwind CSS Documentation](https://tailwindcss.com/docs)&#10;&#10;##  Troubleshooting&#10;&#10;### Common Issues&#10;&#10;#### Backend Issues&#10;```bash&#10;# Clear all caches&#10;php artisan cache:clear&#10;php artisan config:clear&#10;php artisan route:clear&#10;php artisan view:clear&#10;&#10;# Regenerate autoload files&#10;composer dump-autoload&#10;&#10;# Fix file permissions (Linux/Mac)&#10;chmod -R 775 storage bootstrap/cache&#10;```&#10;&#10;#### Frontend Issues&#10;```bash&#10;# Clear node modules and reinstall&#10;rm -rf node_modules package-lock.json&#10;npm install&#10;&#10;# Clear Vite cache&#10;rm -rf node_modules/.vite&#10;```&#10;&#10;### Performance Optimization&#10;- Enable Redis for caching&#10;- Use queue workers for background jobs&#10;- Implement database indexing&#10;- Enable gzip compression&#10;- Use CDN for static assets&#10;&#10;##  Analytics &amp; Monitoring&#10;&#10;### Key Metrics&#10;- User registration and engagement&#10;- Marketplace transaction volume&#10;- Prediction accuracy rates&#10;- API response times&#10;- Error rates and system health&#10;&#10;### Monitoring Tools&#10;- Laravel Telescope (development)&#10;- Application Performance Monitoring (APM)&#10;- Database query optimization&#10;- Error tracking and logging&#10;&#10;##  Internationalization&#10;&#10;### Supported Languages&#10;- **Bengali (বাংলা)** - Primary language&#10;- **English** - Secondary language&#10;&#10;### Adding New Languages&#10;1. Create language files in `resources/lang/{locale}/`&#10;2. Update frontend translation files&#10;3. Configure language switching in UI&#10;&#10;##  Security&#10;&#10;### Security Features&#10;- CSRF protection&#10;- SQL injection prevention&#10;- XSS protection&#10;- Rate limiting&#10;- Input validation and sanitization&#10;- Secure authentication with Sanctum&#10;&#10;### Security Best Practices&#10;- Regular security updates&#10;- Environment variable protection&#10;- HTTPS enforcement in production&#10;- Regular security audits&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.&#10;&#10;##  Team &amp; Support&#10;&#10;### Development Team&#10;- **Project Lead:** [Your Name]&#10;- **Backend Developer:** [Backend Dev Name]&#10;- **Frontend Developer:** [Frontend Dev Name]&#10;- **DevOps Engineer:** [DevOps Name]&#10;&#10;### Support &amp; Contact&#10;- **Email:** support@nibaron.com&#10;- **Documentation:** https://docs.nibaron.com&#10;- **Issue Tracker:** [GitHub Issues](https://github.com/your-org/nibaron-website/issues)&#10;&#10;---&#10;&#10;**Made with ❤️ for farmers worldwide**&#10;&#10;*Nibaron — Empowering farmers with climate intelligence to build a more resilient agricultural future.*" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Landing/sections/FeaturesSection/components/FloatingElements/FloatingElements.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Landing/sections/FeaturesSection/components/FloatingElements/FloatingElements.css" />
              <option name="updatedContent" value="/* Floating Elements Styles */&#10;.floating-elements {&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  pointer-events: none;&#10;  z-index: 0;&#10;  overflow: hidden;&#10;}&#10;&#10;.floating-element {&#10;  position: absolute;&#10;  z-index: 2;&#10;}&#10;&#10;.element-icon {&#10;  position: relative;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  width: 60px;&#10;  height: 60px;&#10;  border-radius: 50%;&#10;  border: 2px solid;&#10;  backdrop-filter: blur(10px);&#10;  transition: all 0.3s ease;&#10;  animation: float var(--element-delay, 0s) infinite;&#10;}&#10;&#10;.element-icon:hover {&#10;  transform: scale(1.1);&#10;}&#10;&#10;.element-pulse {&#10;  position: absolute;&#10;  top: 50%;&#10;  left: 50%;&#10;  width: 8px;&#10;  height: 8px;&#10;  border-radius: 50%;&#10;  transform: translate(-50%, -50%);&#10;  z-index: -1;&#10;}&#10;&#10;/* Background Shapes */&#10;.background-shapes {&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  z-index: 1;&#10;}&#10;&#10;.shape {&#10;  position: absolute;&#10;  border-radius: 50%;&#10;  opacity: 0.1;&#10;}&#10;&#10;.shape-1 {&#10;  width: 120px;&#10;  height: 120px;&#10;  background: linear-gradient(135deg, #3b82f6, #1d4ed8);&#10;  top: 15%;&#10;  right: 20%;&#10;}&#10;&#10;.shape-2 {&#10;  width: 80px;&#10;  height: 80px;&#10;  background: linear-gradient(135deg, #10b981, #059669);&#10;  bottom: 20%;&#10;  left: 25%;&#10;}&#10;&#10;.shape-3 {&#10;  width: 100px;&#10;  height: 100px;&#10;  background: linear-gradient(135deg, #f59e0b, #d97706);&#10;  top: 50%;&#10;  right: 10%;&#10;}&#10;&#10;/* Animations */&#10;@keyframes float {&#10;  0%, 100% {&#10;    transform: translateY(0px) rotate(0deg);&#10;  }&#10;  33% {&#10;    transform: translateY(-10px) rotate(2deg);&#10;  }&#10;  66% {&#10;    transform: translateY(5px) rotate(-2deg);&#10;  }&#10;}&#10;&#10;@keyframes pulse {&#10;  0%, 100% {&#10;    transform: translate(-50%, -50%) scale(1);&#10;    opacity: 0.7;&#10;  }&#10;  50% {&#10;    transform: translate(-50%, -50%) scale(3);&#10;    opacity: 0;&#10;  }&#10;}&#10;&#10;.element-pulse {&#10;  animation: pulse 3s infinite;&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 1024px) {&#10;  .element-icon {&#10;    width: 50px;&#10;    height: 50px;&#10;  }&#10;  &#10;  .shape-1 {&#10;    width: 100px;&#10;    height: 100px;&#10;  }&#10;  &#10;  .shape-2 {&#10;    width: 70px;&#10;    height: 70px;&#10;  }&#10;  &#10;  .shape-3 {&#10;    width: 85px;&#10;    height: 85px;&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .element-icon {&#10;    width: 40px;&#10;    height: 40px;&#10;  }&#10;  &#10;  .shape-1 {&#10;    width: 80px;&#10;    height: 80px;&#10;  }&#10;  &#10;  .shape-2 {&#10;    width: 60px;&#10;    height: 60px;&#10;  }&#10;  &#10;  .shape-3 {&#10;    width: 70px;&#10;    height: 70px;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .floating-elements {&#10;    display: none; /* Hide floating elements on very small screens for performance */&#10;  }&#10;}&#10;&#10;/* Additional visual effects */&#10;.floating-element::before {&#10;  content: '';&#10;  position: absolute;&#10;  top: -20px;&#10;  left: -20px;&#10;  right: -20px;&#10;  bottom: -20px;&#10;  background: radial-gradient(circle, currentColor 0%, transparent 70%);&#10;  opacity: 0.05;&#10;  border-radius: 50%;&#10;  animation: glow 4s ease-in-out infinite alternate;&#10;}&#10;&#10;@keyframes glow {&#10;  from {&#10;    opacity: 0.03;&#10;    transform: scale(0.8);&#10;  }&#10;  to {&#10;    opacity: 0.08;&#10;    transform: scale(1.2);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/Landing/sections/FeaturesSection/components/FloatingElements/FloatingElements.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/Landing/sections/FeaturesSection/components/FloatingElements/FloatingElements.jsx" />
              <option name="updatedContent" value="import React from 'react';&#10;import { motion } from 'framer-motion';&#10;import { Leaf, Droplets, Sun, Wind, Zap, TrendingUp } from 'lucide-react';&#10;import './FloatingElements.css';&#10;&#10;const FloatingElements = () =&gt; {&#10;  const elements = [&#10;    {&#10;      id: 1,&#10;      icon: &lt;Leaf size={24} /&gt;,&#10;      position: { top: '10%', left: '5%' },&#10;      delay: 0,&#10;      color: '#10b981'&#10;    },&#10;    {&#10;      id: 2,&#10;      icon: &lt;Droplets size={20} /&gt;,&#10;      position: { top: '20%', right: '10%' },&#10;      delay: 0.5,&#10;      color: '#3b82f6'&#10;    },&#10;    {&#10;      id: 3,&#10;      icon: &lt;Sun size={22} /&gt;,&#10;      position: { top: '60%', left: '8%' },&#10;      delay: 1,&#10;      color: '#f59e0b'&#10;    },&#10;    {&#10;      id: 4,&#10;      icon: &lt;Wind size={18} /&gt;,&#10;      position: { top: '70%', right: '15%' },&#10;      delay: 1.5,&#10;      color: '#6b7280'&#10;    },&#10;    {&#10;      id: 5,&#10;      icon: &lt;Zap size={16} /&gt;,&#10;      position: { top: '40%', right: '5%' },&#10;      delay: 2,&#10;      color: '#8b5cf6'&#10;    },&#10;    {&#10;      id: 6,&#10;      icon: &lt;TrendingUp size={20} /&gt;,&#10;      position: { bottom: '15%', left: '10%' },&#10;      delay: 2.5,&#10;      color: '#ef4444'&#10;    }&#10;  ];&#10;&#10;  const floatingAnimation = {&#10;    y: [-10, 10, -10],&#10;    rotate: [-5, 5, -5],&#10;    transition: {&#10;      duration: 4,&#10;      repeat: Infinity,&#10;      ease: &quot;easeInOut&quot;&#10;    }&#10;  };&#10;&#10;  const pulseAnimation = {&#10;    scale: [1, 1.2, 1],&#10;    opacity: [0.7, 1, 0.7],&#10;    transition: {&#10;      duration: 3,&#10;      repeat: Infinity,&#10;      ease: &quot;easeInOut&quot;&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;floating-elements&quot;&gt;&#10;      {elements.map((element) =&gt; (&#10;        &lt;motion.div&#10;          key={element.id}&#10;          className=&quot;floating-element&quot;&#10;          style={{&#10;            ...element.position,&#10;            color: element.color&#10;          }}&#10;          initial={{ opacity: 0, scale: 0 }}&#10;          animate={{ opacity: 1, scale: 1 }}&#10;          transition={{ &#10;            delay: element.delay,&#10;            duration: 0.6,&#10;            ease: &quot;easeOut&quot;&#10;          }}&#10;        &gt;&#10;          &lt;motion.div&#10;            className=&quot;element-icon&quot;&#10;            animate={floatingAnimation}&#10;            style={{ &#10;              '--element-delay': `${element.delay}s`,&#10;              backgroundColor: `${element.color}15`,&#10;              borderColor: `${element.color}30`&#10;            }}&#10;          &gt;&#10;            {element.icon}&#10;          &lt;/motion.div&gt;&#10;          &#10;          &lt;motion.div&#10;            className=&quot;element-pulse&quot;&#10;            animate={pulseAnimation}&#10;            style={{ &#10;              backgroundColor: element.color,&#10;              animationDelay: `${element.delay}s`&#10;            }}&#10;          /&gt;&#10;        &lt;/motion.div&gt;&#10;      ))}&#10;      &#10;      {/* Animated background shapes */}&#10;      &lt;div className=&quot;background-shapes&quot;&gt;&#10;        &lt;motion.div&#10;          className=&quot;shape shape-1&quot;&#10;          animate={{&#10;            x: [0, 30, 0],&#10;            y: [0, -20, 0],&#10;            rotate: [0, 180, 360]&#10;          }}&#10;          transition={{&#10;            duration: 20,&#10;            repeat: Infinity,&#10;            ease: &quot;linear&quot;&#10;          }}&#10;        /&gt;&#10;        &lt;motion.div&#10;          className=&quot;shape shape-2&quot;&#10;          animate={{&#10;            x: [0, -25, 0],&#10;            y: [0, 15, 0],&#10;            rotate: [0, -180, -360]&#10;          }}&#10;          transition={{&#10;            duration: 25,&#10;            repeat: Infinity,&#10;            ease: &quot;linear&quot;&#10;          }}&#10;        /&gt;&#10;        &lt;motion.div&#10;          className=&quot;shape shape-3&quot;&#10;          animate={{&#10;            x: [0, 20, 0],&#10;            y: [0, -30, 0],&#10;            scale: [1, 1.2, 1]&#10;          }}&#10;          transition={{&#10;            duration: 15,&#10;            repeat: Infinity,&#10;            ease: &quot;easeInOut&quot;&#10;          }}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default FloatingElements;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/pages/PreOrders.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/pages/PreOrders.jsx" />
              <option name="originalContent" value="import React from 'react';&#10;&#10;const PreOrders = () =&gt; &lt;div style={{padding:32}}&gt;&lt;h1&gt;Pre-Orders&lt;/h1&gt;&lt;p&gt;This is the Pre-Orders page.&lt;/p&gt;&lt;/div&gt;;&#10;&#10;export default PreOrders;&#10;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;&#10;const PreOrders = () =&gt; &lt;div style={{padding:32}}&gt;&lt;h1&gt;Pre-Orders&lt;/h1&gt;&lt;p&gt;This is the Pre-Orders page.&lt;/p&gt;&lt;/div&gt;;&#10;&#10;export default PreOrders;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>